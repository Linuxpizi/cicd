# This is a basic workflow to help you get started with Actions
name: Golang Http Server CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  frontend:
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/web

    runs-on: self-hosted
    steps:
      # install frontend
      # build
      # deploy
      - name: install dep
        uses: actions/setup-node@v2
        with:
          node-version: 14.5.0

      - uses: actions/checkout@v2
      - name: check node version
        run: |
          node --version

      - name: install & build & format
        run: |
          npm install
          npm run build

      - name: copy frontend dist
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.MASTER }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PWD }}
          port: ${{ secrets.MASTER_PORT }}
          strip_components: 4
          source: ${{ github.workspace }}/web/dist/*
          target: "/opt/nginx/index"

  backend:
    runs-on: self-hosted
    steps:
      # install backend
      # build
      # deploy
      # This workflow contains a single job called "build"
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup golang build enviroment
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.0'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.29

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          # skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

      - name: run build
        run: go build ${{ github.workspace }}/cmd/app

      - name: Build & Test
        run: |
          go build -v ./...
          go test -v ./...

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  # nginx:
  #   runs-on: self-hosted
  #   steps:
  #     # install nginx
  #     # config and start nginx
  #     - name: test
  #       run: echo nginx

  # deploy:
  #   runs-on: self-hosted
  #   steps:
  #   - name: copy frontend dist
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.MASTER }}
  #       username: ${{ secrets.USER }}
  #       password: ${{ secrets.PWD }}
  #       port: ${{ secrets.MASTER_PORT }}
  #       source: ${{ github.workspace }}/web/dist
  #       target: "test"

  # notification:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Send mail
  #       if: always()
  #       uses: dawidd6/action-send-mail@v2
  #       with:
  #         # mail server settings
  #         server_address: smtp.gmail.com
  #         server_port: 25
  #         # user credentials
  #         username: ${{ secrets.EMAIL_USERNAME }}
  #         password: ${{ secrets.EMAIL_PASSWORD }}
  #         # email subject
  #         subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
  #         # email body as text
  #         body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
  #         # comma-separated string, send email to
  #         to: tangsong@npool.com
  #         # from email name
  #         from: npool
